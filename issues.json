[17:47:13] Loading shared embedding model: google/embeddinggemma-300m                                                   
[17:47:15] Shared embedding model loaded successfully                                                                   
{
  "summary": {
    "INFO": 325
  },
  "findings": [
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/ascii.py",
      "line": 66,
      "column": 0,
      "msg": "Function/class 'scale_to_terminal_by_height' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/cli.py",
      "line": 482,
      "column": 0,
      "msg": "Function/class 'check' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/cli.py",
      "line": 626,
      "column": 0,
      "msg": "Function/class 'namespace' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/cli.py",
      "line": 699,
      "column": 0,
      "msg": "Function/class 'snapshot' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "src/vibelint/cli.py",
      "line": 482,
      "column": 0,
      "msg": "Public function 'check' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def check(...) -> ReturnType:"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "src/vibelint/cli.py",
      "line": 626,
      "column": 0,
      "msg": "Public function 'namespace' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def namespace(...) -> ReturnType:"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "src/vibelint/cli.py",
      "line": 699,
      "column": 0,
      "msg": "Public function 'snapshot' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def snapshot(...) -> ReturnType:"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "src/vibelint/cli.py",
      "line": 742,
      "column": 0,
      "msg": "Public function 'main' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def main(...) -> ReturnType:"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/config.py",
      "line": 142,
      "column": 0,
      "msg": "Function/class 'load_config' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/config.py",
      "line": 76,
      "column": 0,
      "msg": "Function/class 'settings' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/config.py",
      "line": 85,
      "column": 0,
      "msg": "Function/class 'ignore_codes' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/config.py",
      "line": 133,
      "column": 0,
      "msg": "Function/class 'is_present' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/discovery.py",
      "line": 214,
      "column": 0,
      "msg": "Function/class 'discover_files' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/discovery.py",
      "line": 140,
      "column": 0,
      "msg": "Function '_recursive_glob_with_pruning' docstring missing/incorrect path reference (expected 'vibelint/src/vibelint/discovery.py')",
      "context": "",
      "suggestion": "Add 'vibelint/src/vibelint/discovery.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/discovery.py",
      "line": 214,
      "column": 0,
      "msg": "Function 'discover_files' docstring missing/incorrect path reference (expected 'vibelint/src/vibelint/discovery.py')",
      "context": "",
      "suggestion": "Add 'vibelint/src/vibelint/discovery.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/formatters.py",
      "line": 110,
      "column": 0,
      "msg": "Function/class 'format_results' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/formatters.py",
      "line": 1,
      "column": 0,
      "msg": "Module docstring missing/incorrect path reference (expected 'vibelint/src/vibelint/formatters.py')",
      "context": "",
      "suggestion": "Add 'vibelint/src/vibelint/formatters.py' at the end of the module docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/formatters.py",
      "line": 22,
      "column": 0,
      "msg": "Class 'NaturalLanguageFormatter' docstring missing/incorrect path reference (expected 'vibelint/src/vibelint/formatters.py')",
      "context": "",
      "suggestion": "Add 'vibelint/src/vibelint/formatters.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/formatters.py",
      "line": 92,
      "column": 0,
      "msg": "Class 'JsonFormatter' docstring missing/incorrect path reference (expected 'vibelint/src/vibelint/formatters.py')",
      "context": "",
      "suggestion": "Add 'vibelint/src/vibelint/formatters.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/formatters.py",
      "line": 104,
      "column": 0,
      "msg": "Class 'SarifFormatter' docstring missing/incorrect path reference (expected 'vibelint/src/vibelint/formatters.py')",
      "context": "",
      "suggestion": "Add 'vibelint/src/vibelint/formatters.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/formatters.py",
      "line": 28,
      "column": 0,
      "msg": "Function 'format_results' docstring missing/incorrect path reference (expected 'vibelint/src/vibelint/formatters.py')",
      "context": "",
      "suggestion": "Add 'vibelint/src/vibelint/formatters.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/formatters.py",
      "line": 98,
      "column": 0,
      "msg": "Function 'format_results' docstring missing/incorrect path reference (expected 'vibelint/src/vibelint/formatters.py')",
      "context": "",
      "suggestion": "Add 'vibelint/src/vibelint/formatters.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/formatters.py",
      "line": 110,
      "column": 0,
      "msg": "Function 'format_results' docstring missing/incorrect path reference (expected 'vibelint/src/vibelint/formatters.py')",
      "context": "",
      "suggestion": "Add 'vibelint/src/vibelint/formatters.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/formatters.py",
      "line": 170,
      "column": 0,
      "msg": "Function '_severity_to_sarif_level' docstring missing/incorrect path reference (expected 'vibelint/src/vibelint/formatters.py')",
      "context": "",
      "suggestion": "Add 'vibelint/src/vibelint/formatters.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "src/vibelint/formatters.py",
      "line": 28,
      "column": 0,
      "msg": "Public function 'format_results(config)' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def format_results(config)(...) -> ReturnType:"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "src/vibelint/formatters.py",
      "line": 98,
      "column": 0,
      "msg": "Public function 'format_results(config)' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def format_results(config)(...) -> ReturnType:"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "src/vibelint/formatters.py",
      "line": 110,
      "column": 0,
      "msg": "Public function 'format_results(config)' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def format_results(config)(...) -> ReturnType:"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/namespace.py",
      "line": 221,
      "column": 0,
      "msg": "Function/class 'get_namespace_collisions_str' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "src/vibelint/namespace.py",
      "line": 221,
      "column": 0,
      "msg": "Public function 'get_namespace_collisions_str(console)' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def get_namespace_collisions_str(console)(...) -> ReturnType:"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/plugin_runner.py",
      "line": 110,
      "column": 0,
      "msg": "Function/class 'run_plugin_validation' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/plugin_runner.py",
      "line": 81,
      "column": 0,
      "msg": "Function/class 'format_output' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/plugin_runner.py",
      "line": 103,
      "column": 0,
      "msg": "Function/class 'get_exit_code' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/plugin_runner.py",
      "line": 1,
      "column": 0,
      "msg": "Module docstring missing/incorrect path reference (expected 'vibelint/src/vibelint/plugin_runner.py')",
      "context": "",
      "suggestion": "Add 'vibelint/src/vibelint/plugin_runner.py' at the end of the module docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/plugin_runner.py",
      "line": 22,
      "column": 0,
      "msg": "Class 'PluginValidationRunner' docstring missing/incorrect path reference (expected 'vibelint/src/vibelint/plugin_runner.py')",
      "context": "",
      "suggestion": "Add 'vibelint/src/vibelint/plugin_runner.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/plugin_runner.py",
      "line": 110,
      "column": 0,
      "msg": "Function 'run_plugin_validation' docstring missing/incorrect path reference (expected 'vibelint/src/vibelint/plugin_runner.py')",
      "context": "",
      "suggestion": "Add 'vibelint/src/vibelint/plugin_runner.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/plugin_runner.py",
      "line": 25,
      "column": 0,
      "msg": "Function '__init__' docstring missing/incorrect path reference (expected 'vibelint/src/vibelint/plugin_runner.py')",
      "context": "",
      "suggestion": "Add 'vibelint/src/vibelint/plugin_runner.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/plugin_runner.py",
      "line": 36,
      "column": 0,
      "msg": "Function '_register_builtin_validators' docstring missing/incorrect path reference (expected 'vibelint/src/vibelint/plugin_runner.py')",
      "context": "",
      "suggestion": "Add 'vibelint/src/vibelint/plugin_runner.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/plugin_runner.py",
      "line": 41,
      "column": 0,
      "msg": "Function 'run_validation' docstring missing/incorrect path reference (expected 'vibelint/src/vibelint/plugin_runner.py')",
      "context": "",
      "suggestion": "Add 'vibelint/src/vibelint/plugin_runner.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/plugin_runner.py",
      "line": 74,
      "column": 0,
      "msg": "Function 'get_summary' docstring missing/incorrect path reference (expected 'vibelint/src/vibelint/plugin_runner.py')",
      "context": "",
      "suggestion": "Add 'vibelint/src/vibelint/plugin_runner.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/plugin_runner.py",
      "line": 81,
      "column": 0,
      "msg": "Function 'format_output' docstring missing/incorrect path reference (expected 'vibelint/src/vibelint/plugin_runner.py')",
      "context": "",
      "suggestion": "Add 'vibelint/src/vibelint/plugin_runner.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/plugin_runner.py",
      "line": 99,
      "column": 0,
      "msg": "Function 'has_blocking_issues' docstring missing/incorrect path reference (expected 'vibelint/src/vibelint/plugin_runner.py')",
      "context": "",
      "suggestion": "Add 'vibelint/src/vibelint/plugin_runner.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/plugin_runner.py",
      "line": 103,
      "column": 0,
      "msg": "Function 'get_exit_code' docstring missing/incorrect path reference (expected 'vibelint/src/vibelint/plugin_runner.py')",
      "context": "",
      "suggestion": "Add 'vibelint/src/vibelint/plugin_runner.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/plugin_system.py",
      "line": 13,
      "column": 0,
      "msg": "Imported 'importlib.metadata' is never used",
      "context": "",
      "suggestion": "Remove unused import: importlib.metadata"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/plugin_system.py",
      "line": 52,
      "column": 0,
      "msg": "Function/class 'to_dict' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/plugin_system.py",
      "line": 82,
      "column": 0,
      "msg": "Function/class 'validate' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/plugin_system.py",
      "line": 95,
      "column": 0,
      "msg": "Function/class 'create_finding' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/plugin_system.py",
      "line": 125,
      "column": 0,
      "msg": "Function/class 'format_results' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/plugin_system.py",
      "line": 175,
      "column": 0,
      "msg": "Function/class 'get_validator' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/plugin_system.py",
      "line": 180,
      "column": 0,
      "msg": "Function/class 'get_all_validators' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/plugin_system.py",
      "line": 185,
      "column": 0,
      "msg": "Function/class 'get_formatter' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/plugin_system.py",
      "line": 190,
      "column": 0,
      "msg": "Function/class 'get_all_formatters' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/plugin_system.py",
      "line": 1,
      "column": 0,
      "msg": "Module docstring missing/incorrect path reference (expected 'vibelint/src/vibelint/plugin_system.py')",
      "context": "",
      "suggestion": "Add 'vibelint/src/vibelint/plugin_system.py' at the end of the module docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/plugin_system.py",
      "line": 25,
      "column": 0,
      "msg": "Class 'Severity' docstring missing/incorrect path reference (expected 'vibelint/src/vibelint/plugin_system.py')",
      "context": "",
      "suggestion": "Add 'vibelint/src/vibelint/plugin_system.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/plugin_system.py",
      "line": 40,
      "column": 0,
      "msg": "Class 'Finding' docstring missing/incorrect path reference (expected 'vibelint/src/vibelint/plugin_system.py')",
      "context": "",
      "suggestion": "Add 'vibelint/src/vibelint/plugin_system.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/plugin_system.py",
      "line": 66,
      "column": 0,
      "msg": "Class 'BaseValidator' docstring missing/incorrect path reference (expected 'vibelint/src/vibelint/plugin_system.py')",
      "context": "",
      "suggestion": "Add 'vibelint/src/vibelint/plugin_system.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/plugin_system.py",
      "line": 118,
      "column": 0,
      "msg": "Class 'BaseFormatter' docstring missing/incorrect path reference (expected 'vibelint/src/vibelint/plugin_system.py')",
      "context": "",
      "suggestion": "Add 'vibelint/src/vibelint/plugin_system.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/plugin_system.py",
      "line": 140,
      "column": 0,
      "msg": "Class 'PluginManager' docstring missing/incorrect path reference (expected 'vibelint/src/vibelint/plugin_system.py')",
      "context": "",
      "suggestion": "Add 'vibelint/src/vibelint/plugin_system.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/plugin_system.py",
      "line": 33,
      "column": 0,
      "msg": "Function '__lt__' docstring missing/incorrect path reference (expected 'vibelint/src/vibelint/plugin_system.py')",
      "context": "",
      "suggestion": "Add 'vibelint/src/vibelint/plugin_system.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/plugin_system.py",
      "line": 52,
      "column": 0,
      "msg": "Function 'to_dict' docstring missing/incorrect path reference (expected 'vibelint/src/vibelint/plugin_system.py')",
      "context": "",
      "suggestion": "Add 'vibelint/src/vibelint/plugin_system.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/plugin_system.py",
      "line": 74,
      "column": 0,
      "msg": "Function '__init__' docstring missing/incorrect path reference (expected 'vibelint/src/vibelint/plugin_system.py')",
      "context": "",
      "suggestion": "Add 'vibelint/src/vibelint/plugin_system.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/plugin_system.py",
      "line": 82,
      "column": 0,
      "msg": "Function 'validate' docstring missing/incorrect path reference (expected 'vibelint/src/vibelint/plugin_system.py')",
      "context": "",
      "suggestion": "Add 'vibelint/src/vibelint/plugin_system.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/plugin_system.py",
      "line": 95,
      "column": 0,
      "msg": "Function 'create_finding' docstring missing/incorrect path reference (expected 'vibelint/src/vibelint/plugin_system.py')",
      "context": "",
      "suggestion": "Add 'vibelint/src/vibelint/plugin_system.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/plugin_system.py",
      "line": 125,
      "column": 0,
      "msg": "Function 'format_results' docstring missing/incorrect path reference (expected 'vibelint/src/vibelint/plugin_system.py')",
      "context": "",
      "suggestion": "Add 'vibelint/src/vibelint/plugin_system.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/plugin_system.py",
      "line": 148,
      "column": 0,
      "msg": "Function 'load_plugins' docstring missing/incorrect path reference (expected 'vibelint/src/vibelint/plugin_system.py')",
      "context": "",
      "suggestion": "Add 'vibelint/src/vibelint/plugin_system.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/plugin_system.py",
      "line": 175,
      "column": 0,
      "msg": "Function 'get_validator' docstring missing/incorrect path reference (expected 'vibelint/src/vibelint/plugin_system.py')",
      "context": "",
      "suggestion": "Add 'vibelint/src/vibelint/plugin_system.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/plugin_system.py",
      "line": 180,
      "column": 0,
      "msg": "Function 'get_all_validators' docstring missing/incorrect path reference (expected 'vibelint/src/vibelint/plugin_system.py')",
      "context": "",
      "suggestion": "Add 'vibelint/src/vibelint/plugin_system.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/plugin_system.py",
      "line": 185,
      "column": 0,
      "msg": "Function 'get_formatter' docstring missing/incorrect path reference (expected 'vibelint/src/vibelint/plugin_system.py')",
      "context": "",
      "suggestion": "Add 'vibelint/src/vibelint/plugin_system.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/plugin_system.py",
      "line": 190,
      "column": 0,
      "msg": "Function 'get_all_formatters' docstring missing/incorrect path reference (expected 'vibelint/src/vibelint/plugin_system.py')",
      "context": "",
      "suggestion": "Add 'vibelint/src/vibelint/plugin_system.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "src/vibelint/plugin_system.py",
      "line": 52,
      "column": 0,
      "msg": "Using Any type in return type of to_dict - specify a more precise type",
      "context": "",
      "suggestion": "Replace Any with a specific type or Union of types"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "src/vibelint/plugin_system.py",
      "line": 148,
      "column": 0,
      "msg": "Public function 'load_plugins' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def load_plugins(...) -> ReturnType:"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/report.py",
      "line": 83,
      "column": 0,
      "msg": "Function/class 'write_report_content' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/results.py",
      "line": 40,
      "column": 0,
      "msg": "Function/class 'CheckResult' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/results.py",
      "line": 57,
      "column": 0,
      "msg": "Function/class 'NamespaceResult' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/results.py",
      "line": 72,
      "column": 0,
      "msg": "Function/class 'SnapshotResult' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/rules.py",
      "line": 13,
      "column": 0,
      "msg": "Function/class 'RuleEngine' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/rules.py",
      "line": 182,
      "column": 0,
      "msg": "Function/class 'create_default_rule_config' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/rules.py",
      "line": 91,
      "column": 0,
      "msg": "Function/class 'get_enabled_validators' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/rules.py",
      "line": 103,
      "column": 0,
      "msg": "Function/class 'filter_enabled_validators' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/rules.py",
      "line": 168,
      "column": 0,
      "msg": "Function/class 'get_rule_summary' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/rules.py",
      "line": 1,
      "column": 0,
      "msg": "Module docstring missing/incorrect path reference (expected 'vibelint/src/vibelint/rules.py')",
      "context": "",
      "suggestion": "Add 'vibelint/src/vibelint/rules.py' at the end of the module docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/rules.py",
      "line": 13,
      "column": 0,
      "msg": "Class 'RuleEngine' docstring missing/incorrect path reference (expected 'vibelint/src/vibelint/rules.py')",
      "context": "",
      "suggestion": "Add 'vibelint/src/vibelint/rules.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/rules.py",
      "line": 182,
      "column": 0,
      "msg": "Function 'create_default_rule_config' docstring missing/incorrect path reference (expected 'vibelint/src/vibelint/rules.py')",
      "context": "",
      "suggestion": "Add 'vibelint/src/vibelint/rules.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/rules.py",
      "line": 16,
      "column": 0,
      "msg": "Function '__init__' docstring missing/incorrect path reference (expected 'vibelint/src/vibelint/rules.py')",
      "context": "",
      "suggestion": "Add 'vibelint/src/vibelint/rules.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/rules.py",
      "line": 29,
      "column": 0,
      "msg": "Function '_load_rule_config' docstring missing/incorrect path reference (expected 'vibelint/src/vibelint/rules.py')",
      "context": "",
      "suggestion": "Add 'vibelint/src/vibelint/rules.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/rules.py",
      "line": 53,
      "column": 0,
      "msg": "Function 'is_rule_enabled' docstring missing/incorrect path reference (expected 'vibelint/src/vibelint/rules.py')",
      "context": "",
      "suggestion": "Add 'vibelint/src/vibelint/rules.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/rules.py",
      "line": 58,
      "column": 0,
      "msg": "Function 'get_rule_severity' docstring missing/incorrect path reference (expected 'vibelint/src/vibelint/rules.py')",
      "context": "",
      "suggestion": "Add 'vibelint/src/vibelint/rules.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/rules.py",
      "line": 67,
      "column": 0,
      "msg": "Function 'create_validator_instance' docstring missing/incorrect path reference (expected 'vibelint/src/vibelint/rules.py')",
      "context": "",
      "suggestion": "Add 'vibelint/src/vibelint/rules.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/rules.py",
      "line": 91,
      "column": 0,
      "msg": "Function 'get_enabled_validators' docstring missing/incorrect path reference (expected 'vibelint/src/vibelint/rules.py')",
      "context": "",
      "suggestion": "Add 'vibelint/src/vibelint/rules.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/rules.py",
      "line": 103,
      "column": 0,
      "msg": "Function 'filter_enabled_validators' docstring missing/incorrect path reference (expected 'vibelint/src/vibelint/rules.py')",
      "context": "",
      "suggestion": "Add 'vibelint/src/vibelint/rules.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/rules.py",
      "line": 114,
      "column": 0,
      "msg": "Function '_get_or_create_embedding_model' docstring missing/incorrect path reference (expected 'vibelint/src/vibelint/rules.py')",
      "context": "",
      "suggestion": "Add 'vibelint/src/vibelint/rules.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/rules.py",
      "line": 168,
      "column": 0,
      "msg": "Function 'get_rule_summary' docstring missing/incorrect path reference (expected 'vibelint/src/vibelint/rules.py')",
      "context": "",
      "suggestion": "Add 'vibelint/src/vibelint/rules.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "src/vibelint/rules.py",
      "line": 188,
      "column": 0,
      "msg": "String literal 'WAR*' used 3 times - consider using an Enum",
      "context": "",
      "suggestion": "Create an Enum for these related string constants"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/snapshot.py",
      "line": 21,
      "column": 0,
      "msg": "Function/class 'create_snapshot' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "src/vibelint/snapshot.py",
      "line": 21,
      "column": 0,
      "msg": "Public function 'create_snapshot' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def create_snapshot(...) -> ReturnType:"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "src/vibelint/snapshot.py",
      "line": 122,
      "column": 0,
      "msg": "String literal '__FILES__' used 5 times - consider using an Enum",
      "context": "",
      "suggestion": "Create an Enum for these related string constants"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/utils.py",
      "line": 103,
      "column": 0,
      "msg": "Function/class 'is_python_file' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/utils.py",
      "line": 119,
      "column": 0,
      "msg": "Function/class 'get_relative_path' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/utils.py",
      "line": 134,
      "column": 0,
      "msg": "Function/class 'get_import_path' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/utils.py",
      "line": 164,
      "column": 0,
      "msg": "Function/class 'get_module_name' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/utils.py",
      "line": 180,
      "column": 0,
      "msg": "Function/class 'find_files_by_extension' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/utils.py",
      "line": 223,
      "column": 0,
      "msg": "Function/class 'ensure_directory' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/utils.py",
      "line": 240,
      "column": 0,
      "msg": "Function/class 'read_file_safe' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/utils.py",
      "line": 260,
      "column": 0,
      "msg": "Function/class 'write_file_safe' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/utils.py",
      "line": 283,
      "column": 0,
      "msg": "Function/class 'is_binary' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/basic_patterns.py",
      "line": 18,
      "column": 0,
      "msg": "Function/class 'ArchitectureValidator' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/basic_patterns.py",
      "line": 125,
      "column": 0,
      "msg": "Function/class 'ProjectArchitectureAnalyzer' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/basic_patterns.py",
      "line": 26,
      "column": 0,
      "msg": "Function/class 'validate' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/basic_patterns.py",
      "line": 137,
      "column": 0,
      "msg": "Function/class 'analyze_competing_systems' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/basic_patterns.py",
      "line": 179,
      "column": 0,
      "msg": "Function/class 'analyze_duplicate_functionality' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/basic_patterns.py",
      "line": 47,
      "column": 0,
      "msg": "Manual Console instantiation - use shared console_utils instead",
      "context": "",
      "suggestion": "Replace with: from .console_utils import console"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/basic_patterns.py",
      "line": 1,
      "column": 0,
      "msg": "Module docstring missing/incorrect path reference (expected 'vibelint/validators/architecture/basic_patterns.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/architecture/basic_patterns.py' at the end of the module docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/basic_patterns.py",
      "line": 18,
      "column": 0,
      "msg": "Class 'ArchitectureValidator' docstring missing/incorrect path reference (expected 'vibelint/validators/architecture/basic_patterns.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/architecture/basic_patterns.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/basic_patterns.py",
      "line": 125,
      "column": 0,
      "msg": "Class 'ProjectArchitectureAnalyzer' docstring missing/incorrect path reference (expected 'vibelint/validators/architecture/basic_patterns.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/architecture/basic_patterns.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/basic_patterns.py",
      "line": 26,
      "column": 0,
      "msg": "Function 'validate' docstring missing/incorrect path reference (expected 'vibelint/validators/architecture/basic_patterns.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/architecture/basic_patterns.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/basic_patterns.py",
      "line": 32,
      "column": 0,
      "msg": "Function '_check_competing_systems' docstring missing/incorrect path reference (expected 'vibelint/validators/architecture/basic_patterns.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/architecture/basic_patterns.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/basic_patterns.py",
      "line": 39,
      "column": 0,
      "msg": "Function '_check_mixed_patterns' docstring missing/incorrect path reference (expected 'vibelint/validators/architecture/basic_patterns.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/architecture/basic_patterns.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/basic_patterns.py",
      "line": 88,
      "column": 0,
      "msg": "Function '_check_import_inconsistencies' docstring missing/incorrect path reference (expected 'vibelint/validators/architecture/basic_patterns.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/architecture/basic_patterns.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/basic_patterns.py",
      "line": 137,
      "column": 0,
      "msg": "Function 'analyze_competing_systems' docstring missing/incorrect path reference (expected 'vibelint/validators/architecture/basic_patterns.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/architecture/basic_patterns.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/basic_patterns.py",
      "line": 179,
      "column": 0,
      "msg": "Function 'analyze_duplicate_functionality' docstring missing/incorrect path reference (expected 'vibelint/validators/architecture/basic_patterns.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/architecture/basic_patterns.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/fallback_patterns.py",
      "line": 17,
      "column": 0,
      "msg": "Imported 'Set' is never used",
      "context": "",
      "suggestion": "Remove unused import: Set"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/fallback_patterns.py",
      "line": 26,
      "column": 0,
      "msg": "Function/class 'FallbackAnalyzer' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/fallback_patterns.py",
      "line": 38,
      "column": 0,
      "msg": "Function/class 'validate' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/fallback_patterns.py",
      "line": 52,
      "column": 0,
      "msg": "Function/class 'visit_Try' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/fallback_patterns.py",
      "line": 90,
      "column": 0,
      "msg": "Function/class 'visit_Call' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/fallback_patterns.py",
      "line": 115,
      "column": 0,
      "msg": "Function/class 'visit_FunctionDef' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/fallback_patterns.py",
      "line": 206,
      "column": 0,
      "msg": "Function/class 'visit_Return' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DOCSTRING-MISSING",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/fallback_patterns.py",
      "line": 205,
      "column": 0,
      "msg": "Class 'ReturnVisitor' is missing docstring",
      "context": "",
      "suggestion": "Add docstring to ReturnVisitor() explaining its purpose"
    },
    {
      "rule": "DOCSTRING-MISSING",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/fallback_patterns.py",
      "line": 206,
      "column": 0,
      "msg": "Function 'visit_Return' is missing docstring",
      "context": "",
      "suggestion": "Add docstring to visit_Return() explaining its purpose"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/fallback_patterns.py",
      "line": 1,
      "column": 0,
      "msg": "Module docstring missing/incorrect path reference (expected 'vibelint/validators/architecture/fallback_patterns.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/architecture/fallback_patterns.py' at the end of the module docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/fallback_patterns.py",
      "line": 26,
      "column": 0,
      "msg": "Class 'FallbackAnalyzer' docstring missing/incorrect path reference (expected 'vibelint/validators/architecture/fallback_patterns.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/architecture/fallback_patterns.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/fallback_patterns.py",
      "line": 38,
      "column": 0,
      "msg": "Function 'validate' docstring missing/incorrect path reference (expected 'vibelint/validators/architecture/fallback_patterns.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/architecture/fallback_patterns.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/fallback_patterns.py",
      "line": 52,
      "column": 0,
      "msg": "Function 'visit_Try' docstring missing/incorrect path reference (expected 'vibelint/validators/architecture/fallback_patterns.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/architecture/fallback_patterns.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/fallback_patterns.py",
      "line": 90,
      "column": 0,
      "msg": "Function 'visit_Call' docstring missing/incorrect path reference (expected 'vibelint/validators/architecture/fallback_patterns.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/architecture/fallback_patterns.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/fallback_patterns.py",
      "line": 115,
      "column": 0,
      "msg": "Function 'visit_FunctionDef' docstring missing/incorrect path reference (expected 'vibelint/validators/architecture/fallback_patterns.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/architecture/fallback_patterns.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/fallback_patterns.py",
      "line": 133,
      "column": 0,
      "msg": "Function '_handler_returns_default' docstring missing/incorrect path reference (expected 'vibelint/validators/architecture/fallback_patterns.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/architecture/fallback_patterns.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/fallback_patterns.py",
      "line": 147,
      "column": 0,
      "msg": "Function '_handler_is_silent' docstring missing/incorrect path reference (expected 'vibelint/validators/architecture/fallback_patterns.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/architecture/fallback_patterns.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/fallback_patterns.py",
      "line": 163,
      "column": 0,
      "msg": "Function '_handler_too_broad' docstring missing/incorrect path reference (expected 'vibelint/validators/architecture/fallback_patterns.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/architecture/fallback_patterns.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/fallback_patterns.py",
      "line": 173,
      "column": 0,
      "msg": "Function '_is_chained_dict_get' docstring missing/incorrect path reference (expected 'vibelint/validators/architecture/fallback_patterns.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/architecture/fallback_patterns.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/fallback_patterns.py",
      "line": 188,
      "column": 0,
      "msg": "Function '_is_problematic_getattr' docstring missing/incorrect path reference (expected 'vibelint/validators/architecture/fallback_patterns.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/architecture/fallback_patterns.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/fallback_patterns.py",
      "line": 201,
      "column": 0,
      "msg": "Function '_get_return_statements' docstring missing/incorrect path reference (expected 'vibelint/validators/architecture/fallback_patterns.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/architecture/fallback_patterns.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/fallback_patterns.py",
      "line": 212,
      "column": 0,
      "msg": "Function '_returns_none_or_empty' docstring missing/incorrect path reference (expected 'vibelint/validators/architecture/fallback_patterns.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/architecture/fallback_patterns.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/fallback_patterns.py",
      "line": 52,
      "column": 0,
      "msg": "Public function 'visit_Try' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def visit_Try(...) -> ReturnType:"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/fallback_patterns.py",
      "line": 90,
      "column": 0,
      "msg": "Public function 'visit_Call' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def visit_Call(...) -> ReturnType:"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/fallback_patterns.py",
      "line": 115,
      "column": 0,
      "msg": "Public function 'visit_FunctionDef' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def visit_FunctionDef(...) -> ReturnType:"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/fallback_patterns.py",
      "line": 206,
      "column": 0,
      "msg": "Public function 'visit_Return' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def visit_Return(...) -> ReturnType:"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/fallback_patterns.py",
      "line": 206,
      "column": 0,
      "msg": "Public function 'visit_Return(node)' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def visit_Return(node)(...) -> ReturnType:"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/llm_analysis.py",
      "line": 27,
      "column": 0,
      "msg": "Function/class 'ArchitectureLLMValidator' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/llm_analysis.py",
      "line": 263,
      "column": 0,
      "msg": "Function/class 'validate' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/llm_analysis.py",
      "line": 1,
      "column": 0,
      "msg": "Module docstring missing/incorrect path reference (expected 'vibelint/validators/architecture/llm_analysis.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/architecture/llm_analysis.py' at the end of the module docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/llm_analysis.py",
      "line": 27,
      "column": 0,
      "msg": "Class 'ArchitectureLLMValidator' docstring missing/incorrect path reference (expected 'vibelint/validators/architecture/llm_analysis.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/architecture/llm_analysis.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/llm_analysis.py",
      "line": 41,
      "column": 0,
      "msg": "Function '_setup_llm_client' docstring missing/incorrect path reference (expected 'vibelint/validators/architecture/llm_analysis.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/architecture/llm_analysis.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/llm_analysis.py",
      "line": 111,
      "column": 0,
      "msg": "Function '_analyze_codebase_structure' docstring missing/incorrect path reference (expected 'vibelint/validators/architecture/llm_analysis.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/architecture/llm_analysis.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/llm_analysis.py",
      "line": 150,
      "column": 0,
      "msg": "Function '_extract_imports' docstring missing/incorrect path reference (expected 'vibelint/validators/architecture/llm_analysis.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/architecture/llm_analysis.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/llm_analysis.py",
      "line": 159,
      "column": 0,
      "msg": "Function '_extract_classes' docstring missing/incorrect path reference (expected 'vibelint/validators/architecture/llm_analysis.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/architecture/llm_analysis.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/llm_analysis.py",
      "line": 169,
      "column": 0,
      "msg": "Function '_extract_functions' docstring missing/incorrect path reference (expected 'vibelint/validators/architecture/llm_analysis.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/architecture/llm_analysis.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/llm_analysis.py",
      "line": 179,
      "column": 0,
      "msg": "Function '_query_llm_for_analysis' docstring missing/incorrect path reference (expected 'vibelint/validators/architecture/llm_analysis.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/architecture/llm_analysis.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/llm_analysis.py",
      "line": 263,
      "column": 0,
      "msg": "Function 'validate' docstring missing/incorrect path reference (expected 'vibelint/validators/architecture/llm_analysis.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/architecture/llm_analysis.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/llm_analysis.py",
      "line": 314,
      "column": 0,
      "msg": "Function '_should_analyze_file' docstring missing/incorrect path reference (expected 'vibelint/validators/architecture/llm_analysis.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/architecture/llm_analysis.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/llm_analysis.py",
      "line": 355,
      "column": 0,
      "msg": "Function '_create_file_analysis_prompt' docstring missing/incorrect path reference (expected 'vibelint/validators/architecture/llm_analysis.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/architecture/llm_analysis.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/semantic_similarity.py",
      "line": 13,
      "column": 0,
      "msg": "Imported 'hashlib' is never used",
      "context": "",
      "suggestion": "Remove unused import: hashlib"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/semantic_similarity.py",
      "line": 34,
      "column": 0,
      "msg": "Function/class 'SemanticSimilarityValidator' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/semantic_similarity.py",
      "line": 223,
      "column": 0,
      "msg": "Function/class 'validate' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DOCSTRING-MISSING",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/semantic_similarity.py",
      "line": 22,
      "column": 0,
      "msg": "Class 'DummyNumpy' is missing docstring",
      "context": "",
      "suggestion": "Add docstring to DummyNumpy() explaining its purpose"
    },
    {
      "rule": "DOCSTRING-MISSING",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/semantic_similarity.py",
      "line": 23,
      "column": 0,
      "msg": "Class 'ndarray' is missing docstring",
      "context": "",
      "suggestion": "Add docstring to ndarray() explaining its purpose"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/semantic_similarity.py",
      "line": 1,
      "column": 0,
      "msg": "Module docstring missing/incorrect path reference (expected 'vibelint/validators/architecture/semantic_similarity.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/architecture/semantic_similarity.py' at the end of the module docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/semantic_similarity.py",
      "line": 34,
      "column": 0,
      "msg": "Class 'SemanticSimilarityValidator' docstring missing/incorrect path reference (expected 'vibelint/validators/architecture/semantic_similarity.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/architecture/semantic_similarity.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/semantic_similarity.py",
      "line": 52,
      "column": 0,
      "msg": "Function '_setup_embedding_model' docstring missing/incorrect path reference (expected 'vibelint/validators/architecture/semantic_similarity.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/architecture/semantic_similarity.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/semantic_similarity.py",
      "line": 114,
      "column": 0,
      "msg": "Function '_extract_code_elements' docstring missing/incorrect path reference (expected 'vibelint/validators/architecture/semantic_similarity.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/architecture/semantic_similarity.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/semantic_similarity.py",
      "line": 171,
      "column": 0,
      "msg": "Function '_get_embedding' docstring missing/incorrect path reference (expected 'vibelint/validators/architecture/semantic_similarity.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/architecture/semantic_similarity.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/semantic_similarity.py",
      "line": 193,
      "column": 0,
      "msg": "Function '_get_embeddings_batch' docstring missing/incorrect path reference (expected 'vibelint/validators/architecture/semantic_similarity.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/architecture/semantic_similarity.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/semantic_similarity.py",
      "line": 219,
      "column": 0,
      "msg": "Function '_compute_similarity' docstring missing/incorrect path reference (expected 'vibelint/validators/architecture/semantic_similarity.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/architecture/semantic_similarity.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/semantic_similarity.py",
      "line": 223,
      "column": 0,
      "msg": "Function 'validate' docstring missing/incorrect path reference (expected 'vibelint/validators/architecture/semantic_similarity.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/architecture/semantic_similarity.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/architecture/semantic_similarity.py",
      "line": 283,
      "column": 0,
      "msg": "Function '_cleanup_cache' docstring missing/incorrect path reference (expected 'vibelint/validators/architecture/semantic_similarity.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/architecture/semantic_similarity.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/validators/dead_code.py",
      "line": 19,
      "column": 0,
      "msg": "Function/class 'DeadCodeValidator' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/validators/dead_code.py",
      "line": 27,
      "column": 0,
      "msg": "Function/class 'validate' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/validators/dead_code.py",
      "line": 164,
      "column": 0,
      "msg": "Manual Console instantiation - use shared console_utils instead",
      "context": "",
      "suggestion": "Replace with: from .console_utils import console"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/dead_code.py",
      "line": 19,
      "column": 0,
      "msg": "Class 'DeadCodeValidator' docstring missing/incorrect path reference (expected 'vibelint/validators/dead_code.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/dead_code.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/dead_code.py",
      "line": 27,
      "column": 0,
      "msg": "Function 'validate' docstring missing/incorrect path reference (expected 'vibelint/validators/dead_code.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/dead_code.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/dead_code.py",
      "line": 40,
      "column": 0,
      "msg": "Function '_check_unused_imports' docstring missing/incorrect path reference (expected 'vibelint/validators/dead_code.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/dead_code.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/dead_code.py",
      "line": 82,
      "column": 0,
      "msg": "Function '_check_unreferenced_definitions' docstring missing/incorrect path reference (expected 'vibelint/validators/dead_code.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/dead_code.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/dead_code.py",
      "line": 116,
      "column": 0,
      "msg": "Function '_check_duplicate_patterns' docstring missing/incorrect path reference (expected 'vibelint/validators/dead_code.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/dead_code.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/dead_code.py",
      "line": 154,
      "column": 0,
      "msg": "Function '_check_legacy_patterns' docstring missing/incorrect path reference (expected 'vibelint/validators/dead_code.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/dead_code.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/validators/docstring.py",
      "line": 19,
      "column": 0,
      "msg": "Function/class 'MissingDocstringValidator' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/validators/docstring.py",
      "line": 56,
      "column": 0,
      "msg": "Function/class 'DocstringPathValidator' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/validators/docstring.py",
      "line": 64,
      "column": 0,
      "msg": "Function/class 'validate' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/docstring.py",
      "line": 19,
      "column": 0,
      "msg": "Class 'MissingDocstringValidator' docstring missing/incorrect path reference (expected 'vibelint/validators/docstring.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/docstring.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/docstring.py",
      "line": 56,
      "column": 0,
      "msg": "Class 'DocstringPathValidator' docstring missing/incorrect path reference (expected 'vibelint/validators/docstring.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/docstring.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/docstring.py",
      "line": 27,
      "column": 0,
      "msg": "Function 'validate' docstring missing/incorrect path reference (expected 'vibelint/validators/docstring.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/docstring.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/docstring.py",
      "line": 64,
      "column": 0,
      "msg": "Function 'validate' docstring missing/incorrect path reference (expected 'vibelint/validators/docstring.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/docstring.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/validators/emoji.py",
      "line": 19,
      "column": 0,
      "msg": "Function/class 'EmojiUsageValidator' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/validators/emoji.py",
      "line": 27,
      "column": 0,
      "msg": "Function/class 'validate' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/emoji.py",
      "line": 19,
      "column": 0,
      "msg": "Class 'EmojiUsageValidator' docstring missing/incorrect path reference (expected 'vibelint/validators/emoji.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/emoji.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/emoji.py",
      "line": 27,
      "column": 0,
      "msg": "Function 'validate' docstring missing/incorrect path reference (expected 'vibelint/validators/emoji.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/emoji.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/emoji.py",
      "line": 59,
      "column": 0,
      "msg": "Function '_is_emoji_in_code_context' docstring missing/incorrect path reference (expected 'vibelint/validators/emoji.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/emoji.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/validators/exports.py",
      "line": 18,
      "column": 0,
      "msg": "Function/class 'MissingAllValidator' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/validators/exports.py",
      "line": 86,
      "column": 0,
      "msg": "Function/class 'InitAllValidator' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/validators/exports.py",
      "line": 94,
      "column": 0,
      "msg": "Function/class 'validate' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/exports.py",
      "line": 18,
      "column": 0,
      "msg": "Class 'MissingAllValidator' docstring missing/incorrect path reference (expected 'vibelint/validators/exports.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/exports.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/exports.py",
      "line": 86,
      "column": 0,
      "msg": "Class 'InitAllValidator' docstring missing/incorrect path reference (expected 'vibelint/validators/exports.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/exports.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/exports.py",
      "line": 26,
      "column": 0,
      "msg": "Function 'validate' docstring missing/incorrect path reference (expected 'vibelint/validators/exports.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/exports.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/exports.py",
      "line": 76,
      "column": 0,
      "msg": "Function '_is_valid_all_format' docstring missing/incorrect path reference (expected 'vibelint/validators/exports.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/exports.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/exports.py",
      "line": 94,
      "column": 0,
      "msg": "Function 'validate' docstring missing/incorrect path reference (expected 'vibelint/validators/exports.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/exports.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/validators/print_statements.py",
      "line": 20,
      "column": 0,
      "msg": "Function/class 'PrintStatementValidator' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/validators/print_statements.py",
      "line": 28,
      "column": 0,
      "msg": "Function/class 'validate' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/validators/print_statements.py",
      "line": 99,
      "column": 0,
      "msg": "Function/class 'visit_Call' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/validators/print_statements.py",
      "line": 106,
      "column": 0,
      "msg": "Function/class 'visit_FunctionDef' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/print_statements.py",
      "line": 20,
      "column": 0,
      "msg": "Class 'PrintStatementValidator' docstring missing/incorrect path reference (expected 'vibelint/validators/print_statements.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/print_statements.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/print_statements.py",
      "line": 92,
      "column": 0,
      "msg": "Class '_PrintVisitor' docstring missing/incorrect path reference (expected 'vibelint/validators/print_statements.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/print_statements.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/print_statements.py",
      "line": 28,
      "column": 0,
      "msg": "Function 'validate' docstring missing/incorrect path reference (expected 'vibelint/validators/print_statements.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/print_statements.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/print_statements.py",
      "line": 52,
      "column": 0,
      "msg": "Function '_should_exclude_file' docstring missing/incorrect path reference (expected 'vibelint/validators/print_statements.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/print_statements.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/print_statements.py",
      "line": 99,
      "column": 0,
      "msg": "Function 'visit_Call' docstring missing/incorrect path reference (expected 'vibelint/validators/print_statements.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/print_statements.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/print_statements.py",
      "line": 106,
      "column": 0,
      "msg": "Function 'visit_FunctionDef' docstring missing/incorrect path reference (expected 'vibelint/validators/print_statements.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/print_statements.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "src/vibelint/validators/print_statements.py",
      "line": 99,
      "column": 0,
      "msg": "Public function 'visit_Call' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def visit_Call(...) -> ReturnType:"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "src/vibelint/validators/print_statements.py",
      "line": 99,
      "column": 0,
      "msg": "Public function 'visit_Call(node)' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def visit_Call(node)(...) -> ReturnType:"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "src/vibelint/validators/print_statements.py",
      "line": 106,
      "column": 0,
      "msg": "Public function 'visit_FunctionDef' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def visit_FunctionDef(...) -> ReturnType:"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "src/vibelint/validators/print_statements.py",
      "line": 106,
      "column": 0,
      "msg": "Public function 'visit_FunctionDef(node)' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def visit_FunctionDef(node)(...) -> ReturnType:"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/validators/typing_quality.py",
      "line": 23,
      "column": 0,
      "msg": "Function/class 'TypingQualityValidator' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/validators/typing_quality.py",
      "line": 31,
      "column": 0,
      "msg": "Function/class 'validate' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/validators/typing_quality.py",
      "line": 144,
      "column": 0,
      "msg": "Function/class 'visit_AnnAssign' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/validators/typing_quality.py",
      "line": 160,
      "column": 0,
      "msg": "Function/class 'visit_Assign' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/validators/typing_quality.py",
      "line": 173,
      "column": 0,
      "msg": "Function/class 'visit_FunctionDef' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "src/vibelint/validators/typing_quality.py",
      "line": 196,
      "column": 0,
      "msg": "Function/class 'visit_Constant' is defined but never referenced",
      "context": "",
      "suggestion": "Consider removing unused definition or adding to __all__"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/typing_quality.py",
      "line": 23,
      "column": 0,
      "msg": "Class 'TypingQualityValidator' docstring missing/incorrect path reference (expected 'vibelint/validators/typing_quality.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/typing_quality.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/typing_quality.py",
      "line": 134,
      "column": 0,
      "msg": "Class '_TypingVisitor' docstring missing/incorrect path reference (expected 'vibelint/validators/typing_quality.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/typing_quality.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/typing_quality.py",
      "line": 31,
      "column": 0,
      "msg": "Function 'validate' docstring missing/incorrect path reference (expected 'vibelint/validators/typing_quality.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/typing_quality.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/typing_quality.py",
      "line": 95,
      "column": 0,
      "msg": "Function '_looks_like_data_structure' docstring missing/incorrect path reference (expected 'vibelint/validators/typing_quality.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/typing_quality.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/typing_quality.py",
      "line": 105,
      "column": 0,
      "msg": "Function '_is_acceptable_any_usage' docstring missing/incorrect path reference (expected 'vibelint/validators/typing_quality.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/typing_quality.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/typing_quality.py",
      "line": 111,
      "column": 0,
      "msg": "Function '_find_enum_candidates' docstring missing/incorrect path reference (expected 'vibelint/validators/typing_quality.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/typing_quality.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/typing_quality.py",
      "line": 144,
      "column": 0,
      "msg": "Function 'visit_AnnAssign' docstring missing/incorrect path reference (expected 'vibelint/validators/typing_quality.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/typing_quality.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/typing_quality.py",
      "line": 160,
      "column": 0,
      "msg": "Function 'visit_Assign' docstring missing/incorrect path reference (expected 'vibelint/validators/typing_quality.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/typing_quality.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/typing_quality.py",
      "line": 173,
      "column": 0,
      "msg": "Function 'visit_FunctionDef' docstring missing/incorrect path reference (expected 'vibelint/validators/typing_quality.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/typing_quality.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/typing_quality.py",
      "line": 196,
      "column": 0,
      "msg": "Function 'visit_Constant' docstring missing/incorrect path reference (expected 'vibelint/validators/typing_quality.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/typing_quality.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/typing_quality.py",
      "line": 202,
      "column": 0,
      "msg": "Function '_is_tuple_annotation' docstring missing/incorrect path reference (expected 'vibelint/validators/typing_quality.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/typing_quality.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "src/vibelint/validators/typing_quality.py",
      "line": 213,
      "column": 0,
      "msg": "Function '_contains_any' docstring missing/incorrect path reference (expected 'vibelint/validators/typing_quality.py')",
      "context": "",
      "suggestion": "Add 'vibelint/validators/typing_quality.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "src/vibelint/validators/typing_quality.py",
      "line": 144,
      "column": 0,
      "msg": "Public function 'visit_AnnAssign' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def visit_AnnAssign(...) -> ReturnType:"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "src/vibelint/validators/typing_quality.py",
      "line": 144,
      "column": 0,
      "msg": "Public function 'visit_AnnAssign(node)' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def visit_AnnAssign(node)(...) -> ReturnType:"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "src/vibelint/validators/typing_quality.py",
      "line": 160,
      "column": 0,
      "msg": "Public function 'visit_Assign' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def visit_Assign(...) -> ReturnType:"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "src/vibelint/validators/typing_quality.py",
      "line": 160,
      "column": 0,
      "msg": "Public function 'visit_Assign(node)' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def visit_Assign(node)(...) -> ReturnType:"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "src/vibelint/validators/typing_quality.py",
      "line": 173,
      "column": 0,
      "msg": "Public function 'visit_FunctionDef' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def visit_FunctionDef(...) -> ReturnType:"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "src/vibelint/validators/typing_quality.py",
      "line": 173,
      "column": 0,
      "msg": "Public function 'visit_FunctionDef(node)' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def visit_FunctionDef(node)(...) -> ReturnType:"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "src/vibelint/validators/typing_quality.py",
      "line": 196,
      "column": 0,
      "msg": "Public function 'visit_Constant' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def visit_Constant(...) -> ReturnType:"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "src/vibelint/validators/typing_quality.py",
      "line": 196,
      "column": 0,
      "msg": "Public function 'visit_Constant(node)' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def visit_Constant(node)(...) -> ReturnType:"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "tests/test_claude_validators.py",
      "line": 1,
      "column": 0,
      "msg": "Module docstring missing/incorrect path reference (expected 'tools/vibelint/tests/test_claude_validators.py')",
      "context": "",
      "suggestion": "Add 'tools/vibelint/tests/test_claude_validators.py' at the end of the module docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "tests/test_claude_validators.py",
      "line": 13,
      "column": 0,
      "msg": "Function 'test_print_statement_validator' docstring missing/incorrect path reference (expected 'tools/vibelint/tests/test_claude_validators.py')",
      "context": "",
      "suggestion": "Add 'tools/vibelint/tests/test_claude_validators.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "tests/test_claude_validators.py",
      "line": 31,
      "column": 0,
      "msg": "Function 'test_emoji_usage_validator' docstring missing/incorrect path reference (expected 'tools/vibelint/tests/test_claude_validators.py')",
      "context": "",
      "suggestion": "Add 'tools/vibelint/tests/test_claude_validators.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "tests/test_claude_validators.py",
      "line": 50,
      "column": 0,
      "msg": "Function 'test_typing_quality_validator' docstring missing/incorrect path reference (expected 'tools/vibelint/tests/test_claude_validators.py')",
      "context": "",
      "suggestion": "Add 'tools/vibelint/tests/test_claude_validators.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "tests/test_claude_validators.py",
      "line": 70,
      "column": 0,
      "msg": "Function 'test_llm_formatter' docstring missing/incorrect path reference (expected 'tools/vibelint/tests/test_claude_validators.py')",
      "context": "",
      "suggestion": "Add 'tools/vibelint/tests/test_claude_validators.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "EXPORTS-MISSING-ALL",
      "level": "INFO",
      "path": "tests/test_claude_validators.py",
      "line": 1,
      "column": 0,
      "msg": "Module has public functions/classes but no __all__ definition",
      "context": "",
      "suggestion": "Add __all__ = [...] to explicitly define public API"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "tests/test_claude_validators.py",
      "line": 13,
      "column": 0,
      "msg": "Public function 'test_print_statement_validator' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def test_print_statement_validator(...) -> ReturnType:"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "tests/test_claude_validators.py",
      "line": 31,
      "column": 0,
      "msg": "Public function 'test_emoji_usage_validator' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def test_emoji_usage_validator(...) -> ReturnType:"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "tests/test_claude_validators.py",
      "line": 50,
      "column": 0,
      "msg": "Public function 'test_typing_quality_validator' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def test_typing_quality_validator(...) -> ReturnType:"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "tests/test_claude_validators.py",
      "line": 70,
      "column": 0,
      "msg": "Public function 'test_llm_formatter' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def test_llm_formatter(...) -> ReturnType:"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "tests/test_cli.py",
      "line": 1,
      "column": 0,
      "msg": "Module docstring missing/incorrect path reference (expected 'tools/vibelint/tests/test_cli.py')",
      "context": "",
      "suggestion": "Add 'tools/vibelint/tests/test_cli.py' at the end of the module docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "tests/test_cli.py",
      "line": 40,
      "column": 0,
      "msg": "Function 'clean_output' docstring missing/incorrect path reference (expected 'tools/vibelint/tests/test_cli.py')",
      "context": "",
      "suggestion": "Add 'tools/vibelint/tests/test_cli.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "tests/test_cli.py",
      "line": 49,
      "column": 0,
      "msg": "Function 'assert_output_contains' docstring missing/incorrect path reference (expected 'tools/vibelint/tests/test_cli.py')",
      "context": "",
      "suggestion": "Add 'tools/vibelint/tests/test_cli.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "tests/test_cli.py",
      "line": 57,
      "column": 0,
      "msg": "Function 'assert_output_does_not_contain' docstring missing/incorrect path reference (expected 'tools/vibelint/tests/test_cli.py')",
      "context": "",
      "suggestion": "Add 'tools/vibelint/tests/test_cli.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "tests/test_cli.py",
      "line": 65,
      "column": 0,
      "msg": "Function 'assert_output_matches' docstring missing/incorrect path reference (expected 'tools/vibelint/tests/test_cli.py')",
      "context": "",
      "suggestion": "Add 'tools/vibelint/tests/test_cli.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "tests/test_cli.py",
      "line": 75,
      "column": 0,
      "msg": "Function 'assert_output_does_not_match' docstring missing/incorrect path reference (expected 'tools/vibelint/tests/test_cli.py')",
      "context": "",
      "suggestion": "Add 'tools/vibelint/tests/test_cli.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "tests/test_cli.py",
      "line": 87,
      "column": 0,
      "msg": "Function 'runner' docstring missing/incorrect path reference (expected 'tools/vibelint/tests/test_cli.py')",
      "context": "",
      "suggestion": "Add 'tools/vibelint/tests/test_cli.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "tests/test_cli.py",
      "line": 93,
      "column": 0,
      "msg": "Function 'setup_test_project' docstring missing/incorrect path reference (expected 'tools/vibelint/tests/test_cli.py')",
      "context": "",
      "suggestion": "Add 'tools/vibelint/tests/test_cli.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "tests/test_cli.py",
      "line": 189,
      "column": 0,
      "msg": "Function 'modify_pyproject' docstring missing/incorrect path reference (expected 'tools/vibelint/tests/test_cli.py')",
      "context": "",
      "suggestion": "Add 'tools/vibelint/tests/test_cli.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "tests/test_cli.py",
      "line": 228,
      "column": 0,
      "msg": "Function 'test_cli_version' docstring missing/incorrect path reference (expected 'tools/vibelint/tests/test_cli.py')",
      "context": "",
      "suggestion": "Add 'tools/vibelint/tests/test_cli.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "tests/test_cli.py",
      "line": 235,
      "column": 0,
      "msg": "Function 'test_cli_help' docstring missing/incorrect path reference (expected 'tools/vibelint/tests/test_cli.py')",
      "context": "",
      "suggestion": "Add 'tools/vibelint/tests/test_cli.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "tests/test_cli.py",
      "line": 249,
      "column": 0,
      "msg": "Function 'test_cli_no_command_shows_art_and_help' docstring missing/incorrect path reference (expected 'tools/vibelint/tests/test_cli.py')",
      "context": "",
      "suggestion": "Add 'tools/vibelint/tests/test_cli.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "tests/test_cli.py",
      "line": 262,
      "column": 0,
      "msg": "Function 'test_cli_no_project_root' docstring missing/incorrect path reference (expected 'tools/vibelint/tests/test_cli.py')",
      "context": "",
      "suggestion": "Add 'tools/vibelint/tests/test_cli.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "tests/test_cli.py",
      "line": 285,
      "column": 0,
      "msg": "Function 'test_check_success' docstring missing/incorrect path reference (expected 'tools/vibelint/tests/test_cli.py')",
      "context": "",
      "suggestion": "Add 'tools/vibelint/tests/test_cli.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "tests/test_cli.py",
      "line": 306,
      "column": 0,
      "msg": "Function 'test_check_failure' docstring missing/incorrect path reference (expected 'tools/vibelint/tests/test_cli.py')",
      "context": "",
      "suggestion": "Add 'tools/vibelint/tests/test_cli.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "tests/test_cli.py",
      "line": 346,
      "column": 0,
      "msg": "Function 'test_check_output_report' docstring missing/incorrect path reference (expected 'tools/vibelint/tests/test_cli.py')",
      "context": "",
      "suggestion": "Add 'tools/vibelint/tests/test_cli.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "tests/test_cli.py",
      "line": 393,
      "column": 0,
      "msg": "Function 'test_namespace_basic' docstring missing/incorrect path reference (expected 'tools/vibelint/tests/test_cli.py')",
      "context": "",
      "suggestion": "Add 'tools/vibelint/tests/test_cli.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "tests/test_cli.py",
      "line": 412,
      "column": 0,
      "msg": "Function 'test_namespace_output_file' docstring missing/incorrect path reference (expected 'tools/vibelint/tests/test_cli.py')",
      "context": "",
      "suggestion": "Add 'tools/vibelint/tests/test_cli.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "tests/test_cli.py",
      "line": 448,
      "column": 0,
      "msg": "Function 'test_snapshot_basic' docstring missing/incorrect path reference (expected 'tools/vibelint/tests/test_cli.py')",
      "context": "",
      "suggestion": "Add 'tools/vibelint/tests/test_cli.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "tests/test_cli.py",
      "line": 489,
      "column": 0,
      "msg": "Function 'test_snapshot_exclude' docstring missing/incorrect path reference (expected 'tools/vibelint/tests/test_cli.py')",
      "context": "",
      "suggestion": "Add 'tools/vibelint/tests/test_cli.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "tests/test_cli.py",
      "line": 526,
      "column": 0,
      "msg": "Function 'test_snapshot_exclude_output_file' docstring missing/incorrect path reference (expected 'tools/vibelint/tests/test_cli.py')",
      "context": "",
      "suggestion": "Add 'tools/vibelint/tests/test_cli.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "tests/test_cli.py",
      "line": 590,
      "column": 0,
      "msg": "Function 'test_check_json_output_format' docstring missing/incorrect path reference (expected 'tools/vibelint/tests/test_cli.py')",
      "context": "",
      "suggestion": "Add 'tools/vibelint/tests/test_cli.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "tests/test_cli.py",
      "line": 619,
      "column": 0,
      "msg": "Function 'test_check_sarif_output_format' docstring missing/incorrect path reference (expected 'tools/vibelint/tests/test_cli.py')",
      "context": "",
      "suggestion": "Add 'tools/vibelint/tests/test_cli.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "tests/test_cli.py",
      "line": 651,
      "column": 0,
      "msg": "Function 'test_check_human_output_format_default' docstring missing/incorrect path reference (expected 'tools/vibelint/tests/test_cli.py')",
      "context": "",
      "suggestion": "Add 'tools/vibelint/tests/test_cli.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "EXPORTS-MISSING-ALL",
      "level": "INFO",
      "path": "tests/test_cli.py",
      "line": 1,
      "column": 0,
      "msg": "Module has public functions/classes but no __all__ definition",
      "context": "",
      "suggestion": "Add __all__ = [...] to explicitly define public API"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "tests/test_cli.py",
      "line": 189,
      "column": 0,
      "msg": "Using Any type in parameter 'updates' of modify_pyproject - specify a more precise type",
      "context": "",
      "suggestion": "Replace Any with a specific type or Union of types"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "tests/test_cli.py",
      "line": 49,
      "column": 0,
      "msg": "Public function 'assert_output_contains' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def assert_output_contains(...) -> ReturnType:"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "tests/test_cli.py",
      "line": 57,
      "column": 0,
      "msg": "Public function 'assert_output_does_not_contain' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def assert_output_does_not_contain(...) -> ReturnType:"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "tests/test_cli.py",
      "line": 65,
      "column": 0,
      "msg": "Public function 'assert_output_matches' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def assert_output_matches(...) -> ReturnType:"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "tests/test_cli.py",
      "line": 75,
      "column": 0,
      "msg": "Public function 'assert_output_does_not_match' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def assert_output_does_not_match(...) -> ReturnType:"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "tests/test_cli.py",
      "line": 189,
      "column": 0,
      "msg": "Public function 'modify_pyproject' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def modify_pyproject(...) -> ReturnType:"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "tests/test_cli.py",
      "line": 228,
      "column": 0,
      "msg": "Public function 'test_cli_version' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def test_cli_version(...) -> ReturnType:"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "tests/test_cli.py",
      "line": 235,
      "column": 0,
      "msg": "Public function 'test_cli_help' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def test_cli_help(...) -> ReturnType:"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "tests/test_cli.py",
      "line": 249,
      "column": 0,
      "msg": "Public function 'test_cli_no_command_shows_art_and_help' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def test_cli_no_command_shows_art_and_help(...) -> ReturnType:"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "tests/test_cli.py",
      "line": 262,
      "column": 0,
      "msg": "Public function 'test_cli_no_project_root' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def test_cli_no_project_root(...) -> ReturnType:"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "tests/test_cli.py",
      "line": 285,
      "column": 0,
      "msg": "Public function 'test_check_success' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def test_check_success(...) -> ReturnType:"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "tests/test_cli.py",
      "line": 306,
      "column": 0,
      "msg": "Public function 'test_check_failure' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def test_check_failure(...) -> ReturnType:"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "tests/test_cli.py",
      "line": 346,
      "column": 0,
      "msg": "Public function 'test_check_output_report' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def test_check_output_report(...) -> ReturnType:"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "tests/test_cli.py",
      "line": 393,
      "column": 0,
      "msg": "Public function 'test_namespace_basic' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def test_namespace_basic(...) -> ReturnType:"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "tests/test_cli.py",
      "line": 412,
      "column": 0,
      "msg": "Public function 'test_namespace_output_file' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def test_namespace_output_file(...) -> ReturnType:"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "tests/test_cli.py",
      "line": 448,
      "column": 0,
      "msg": "Public function 'test_snapshot_basic' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def test_snapshot_basic(...) -> ReturnType:"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "tests/test_cli.py",
      "line": 489,
      "column": 0,
      "msg": "Public function 'test_snapshot_exclude' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def test_snapshot_exclude(...) -> ReturnType:"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "tests/test_cli.py",
      "line": 526,
      "column": 0,
      "msg": "Public function 'test_snapshot_exclude_output_file' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def test_snapshot_exclude_output_file(...) -> ReturnType:"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "tests/test_cli.py",
      "line": 590,
      "column": 0,
      "msg": "Public function 'test_check_json_output_format' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def test_check_json_output_format(...) -> ReturnType:"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "tests/test_cli.py",
      "line": 619,
      "column": 0,
      "msg": "Public function 'test_check_sarif_output_format' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def test_check_sarif_output_format(...) -> ReturnType:"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "tests/test_cli.py",
      "line": 651,
      "column": 0,
      "msg": "Public function 'test_check_human_output_format_default' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def test_check_human_output_format_default(...) -> ReturnType:"
    },
    {
      "rule": "DEAD-CODE-FOUND",
      "level": "INFO",
      "path": "tests/test_plugin_system.py",
      "line": 9,
      "column": 0,
      "msg": "Imported 'pytest' is never used",
      "context": "",
      "suggestion": "Remove unused import: pytest"
    },
    {
      "rule": "DOCSTRING-MISSING",
      "level": "INFO",
      "path": "tests/test_plugin_system.py",
      "line": 24,
      "column": 0,
      "msg": "Function 'validate' is missing docstring",
      "context": "",
      "suggestion": "Add docstring to validate() explaining its purpose"
    },
    {
      "rule": "DOCSTRING-MISSING",
      "level": "INFO",
      "path": "tests/test_plugin_system.py",
      "line": 40,
      "column": 0,
      "msg": "Function 'format_results' is missing docstring",
      "context": "",
      "suggestion": "Add docstring to format_results() explaining its purpose"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "tests/test_plugin_system.py",
      "line": 1,
      "column": 0,
      "msg": "Module docstring missing/incorrect path reference (expected 'tools/vibelint/tests/test_plugin_system.py')",
      "context": "",
      "suggestion": "Add 'tools/vibelint/tests/test_plugin_system.py' at the end of the module docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "tests/test_plugin_system.py",
      "line": 16,
      "column": 0,
      "msg": "Class 'TestValidator' docstring missing/incorrect path reference (expected 'tools/vibelint/tests/test_plugin_system.py')",
      "context": "",
      "suggestion": "Add 'tools/vibelint/tests/test_plugin_system.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "tests/test_plugin_system.py",
      "line": 34,
      "column": 0,
      "msg": "Class 'TestFormatter' docstring missing/incorrect path reference (expected 'tools/vibelint/tests/test_plugin_system.py')",
      "context": "",
      "suggestion": "Add 'tools/vibelint/tests/test_plugin_system.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "tests/test_plugin_system.py",
      "line": 44,
      "column": 0,
      "msg": "Function 'test_finding_creation' docstring missing/incorrect path reference (expected 'tools/vibelint/tests/test_plugin_system.py')",
      "context": "",
      "suggestion": "Add 'tools/vibelint/tests/test_plugin_system.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "tests/test_plugin_system.py",
      "line": 67,
      "column": 0,
      "msg": "Function 'test_base_validator' docstring missing/incorrect path reference (expected 'tools/vibelint/tests/test_plugin_system.py')",
      "context": "",
      "suggestion": "Add 'tools/vibelint/tests/test_plugin_system.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "tests/test_plugin_system.py",
      "line": 85,
      "column": 0,
      "msg": "Function 'test_severity_override' docstring missing/incorrect path reference (expected 'tools/vibelint/tests/test_plugin_system.py')",
      "context": "",
      "suggestion": "Add 'tools/vibelint/tests/test_plugin_system.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "tests/test_plugin_system.py",
      "line": 94,
      "column": 0,
      "msg": "Function 'test_plugin_manager' docstring missing/incorrect path reference (expected 'tools/vibelint/tests/test_plugin_system.py')",
      "context": "",
      "suggestion": "Add 'tools/vibelint/tests/test_plugin_system.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "tests/test_plugin_system.py",
      "line": 107,
      "column": 0,
      "msg": "Function 'test_rule_engine' docstring missing/incorrect path reference (expected 'tools/vibelint/tests/test_plugin_system.py')",
      "context": "",
      "suggestion": "Add 'tools/vibelint/tests/test_plugin_system.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "tests/test_plugin_system.py",
      "line": 123,
      "column": 0,
      "msg": "Function 'test_human_formatter' docstring missing/incorrect path reference (expected 'tools/vibelint/tests/test_plugin_system.py')",
      "context": "",
      "suggestion": "Add 'tools/vibelint/tests/test_plugin_system.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "tests/test_plugin_system.py",
      "line": 154,
      "column": 0,
      "msg": "Function 'test_json_formatter' docstring missing/incorrect path reference (expected 'tools/vibelint/tests/test_plugin_system.py')",
      "context": "",
      "suggestion": "Add 'tools/vibelint/tests/test_plugin_system.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "DOCSTRING-PATH-REFERENCE",
      "level": "INFO",
      "path": "tests/test_plugin_system.py",
      "line": 181,
      "column": 0,
      "msg": "Function 'test_severity_comparison' docstring missing/incorrect path reference (expected 'tools/vibelint/tests/test_plugin_system.py')",
      "context": "",
      "suggestion": "Add 'tools/vibelint/tests/test_plugin_system.py' at the end of the docstring for LLM context"
    },
    {
      "rule": "EXPORTS-MISSING-ALL",
      "level": "INFO",
      "path": "tests/test_plugin_system.py",
      "line": 1,
      "column": 0,
      "msg": "Module has public functions/classes but no __all__ definition",
      "context": "",
      "suggestion": "Add __all__ = [...] to explicitly define public API"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "tests/test_plugin_system.py",
      "line": 40,
      "column": 0,
      "msg": "Public function 'format_results' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def format_results(...) -> ReturnType:"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "tests/test_plugin_system.py",
      "line": 40,
      "column": 0,
      "msg": "Public function 'format_results(findings)' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def format_results(findings)(...) -> ReturnType:"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "tests/test_plugin_system.py",
      "line": 40,
      "column": 0,
      "msg": "Public function 'format_results(summary)' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def format_results(summary)(...) -> ReturnType:"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "tests/test_plugin_system.py",
      "line": 44,
      "column": 0,
      "msg": "Public function 'test_finding_creation' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def test_finding_creation(...) -> ReturnType:"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "tests/test_plugin_system.py",
      "line": 67,
      "column": 0,
      "msg": "Public function 'test_base_validator' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def test_base_validator(...) -> ReturnType:"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "tests/test_plugin_system.py",
      "line": 85,
      "column": 0,
      "msg": "Public function 'test_severity_override' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def test_severity_override(...) -> ReturnType:"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "tests/test_plugin_system.py",
      "line": 94,
      "column": 0,
      "msg": "Public function 'test_plugin_manager' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def test_plugin_manager(...) -> ReturnType:"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "tests/test_plugin_system.py",
      "line": 107,
      "column": 0,
      "msg": "Public function 'test_rule_engine' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def test_rule_engine(...) -> ReturnType:"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "tests/test_plugin_system.py",
      "line": 123,
      "column": 0,
      "msg": "Public function 'test_human_formatter' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def test_human_formatter(...) -> ReturnType:"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "tests/test_plugin_system.py",
      "line": 154,
      "column": 0,
      "msg": "Public function 'test_json_formatter' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def test_json_formatter(...) -> ReturnType:"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "tests/test_plugin_system.py",
      "line": 181,
      "column": 0,
      "msg": "Public function 'test_severity_comparison' is missing type annotations",
      "context": "",
      "suggestion": "Add type hints: def test_severity_comparison(...) -> ReturnType:"
    },
    {
      "rule": "TYPING-POOR-PRACTICE",
      "level": "INFO",
      "path": "tests/test_plugin_system.py",
      "line": 62,
      "column": 0,
      "msg": "String literal 'WAR*' used 6 times - consider using an Enum",
      "context": "",
      "suggestion": "Create an Enum for these related string constants"
    }
  ]
}

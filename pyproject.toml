[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "vibelint"
version = "0.1.2"
description = "Suite of tools to enhance the vibe coding process."
authors = [
  { name = "Mithran Mohanraj", email = "mithran.mohanraj@gmail.com" }
]
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Quality Assurance",
]
dependencies = [
    "click>=8.1.0",
    "tomli>=2.0.0; python_version < '3.11'",
    "tomli-w",
    "colorama>=0.4.0",
    "rich>=12.0.0",
    "libcst"
]

[project.scripts]
vibelint = "vibelint.cli:main"

[project.entry-points."vibelint.validators"]
# New semantic rule IDs (preferred) - now pointing to individual files
"DOCSTRING-MISSING" = "vibelint.validators.docstring:MissingDocstringValidator"
"DOCSTRING-PATH-REFERENCE" = "vibelint.validators.docstring:DocstringPathValidator"
"EXPORTS-MISSING-ALL" = "vibelint.validators.exports:MissingAllValidator"
"EXPORTS-MISSING-ALL-INIT" = "vibelint.validators.exports:InitAllValidator"
"PRINT-STATEMENT" = "vibelint.validators.print_statements:PrintStatementValidator"
"EMOJI-IN-STRING" = "vibelint.validators.emoji:EmojiUsageValidator"
"DEAD-CODE-FOUND" = "vibelint.validators.dead_code:DeadCodeValidator"
"ARCHITECTURE-INCONSISTENT" = "vibelint.validators.architecture:ArchitectureValidator"
"TYPING-POOR-PRACTICE" = "vibelint.validators.typing_quality:TypingQualityValidator"


[project.entry-points."vibelint.formatters"]
human = "vibelint.formatters:HumanFormatter"
json = "vibelint.formatters:JsonFormatter"
sarif = "vibelint.formatters:SarifFormatter"

[project.urls]
"Homepage" = "https://github.com/mithranm/vibelint"
"Bug Tracker" = "https://github.com/mithranm/vibelint/issues"

[tool.setuptools.packages.find]
where = ["src"]
include = ["vibelint*"]

[tool.vibelint]
include_globs = [
    "src/**/*.py",
    "tests/**/*.py",
    "pyproject.toml",
    "VIBECHECKER.txt"
]
exclude_globs = [
    "tests/fixtures/*"
]
peek_globs = ["coverage.xml"]
allowed_shebangs = ["#!/usr/bin/env python3"]
large_dir_threshold = 500
error_on_missing_all_in_init = false

# Rule configuration - can disable or change severity
# Values: "OFF" (disabled), "INFO", "WARN", "BLOCK"
[tool.vibelint.rules]
# Core validators (using new semantic rule IDs)
"DOCSTRING-MISSING" = "INFO"           # Missing docstrings
"DOCSTRING-PATH-REFERENCE" = "INFO"    # Missing path reference in docstrings
"EXPORTS-MISSING-ALL" = "INFO"         # Missing __all__
"EXPORTS-MISSING-ALL-INIT" = "INFO"    # Missing __all__ in __init__.py
"PRINT-STATEMENT" = "WARN"             # Print statements
"EMOJI-IN-STRING" = "WARN"             # Emoji usage - important for MCP compatibility

# Advanced validators
"DEAD-CODE-FOUND" = "INFO"             # Dead code detection - unused imports, unreferenced functions
"ARCHITECTURE-INCONSISTENT" = "WARN"   # Architectural inconsistency detection
"TYPING-POOR-PRACTICE" = "WARN"        # Poor typing practices - tuples instead of dataclasses, etc.


# Configurable thresholds for rules
[tool.vibelint.thresholds]
max_function_parameters = 7        # Functions with more parameters get warnings
keyword_only_parameter_count = 4   # Functions with this many params should use keyword-only
positional_call_argument_limit = 3 # Function calls with more positional args get suggestions
large_dir_file_count = 500         # General: Directory size threshold

# Print statement validation configuration
[tool.vibelint.print_validation]
# Files matching these patterns are exempt from print statement validation
exclude_globs = [
    "test_*.py",
    "*_test.py",
    "conftest.py",
    "tests/**/*.py",
    "cli.py",
    "main.py",
    "__main__.py",
    "*_cli.py",
    "*_cmd.py"
]

[tool.black]
target-version = ["py310", "py311", "py312"]
line-length=100

[tool.ruff]
line-length = 100
target-version = "py310"
exclude = [
    ".git",
    ".pytest_cache",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "venv"
]

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
]
ignore = [
    "E501",   # Line too long (handled by black)
    "B008",   # Allow function calls in argument defaults
    "B904",   # Allow raise without from for now
    "UP036",  # Allow outdated version blocks
    "C414",   # Allow unnecessary list() calls for clarity
    "SIM102", # Allow nested if statements
    "SIM210", # Allow if-else instead of bool()
    "SIM113", # Allow manual index tracking
    "SIM103", # Allow explicit return True/False
    "N802",   # Allow uppercase function names (LibCST visitor methods)
    "N806",   # Allow uppercase variables
    "B006",   # Allow mutable defaults for now
    "B007",   # Allow unused loop variables
    "UP007",  # Allow Union syntax for now
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["F401", "F811"]  # Allow unused imports in tests

[tool.setuptools.package-data]
vibelint = ["VIBECHECKER.txt"]
[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "vibelint"
version = "0.1.2"
description = "Suite of tools to enhance the vibe coding process."
authors = [
  { name = "Mithran Mohanraj", email = "mithran.mohanraj@gmail.com" }
]
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Quality Assurance",
]
dependencies = [
    "click>=8.1.0",
    "tomli>=2.0.0; python_version < '3.11'",
    "tomli-w",
    "colorama>=0.4.0",
    "rich>=12.0.0",
    "libcst",
    "requests>=2.25.0",
    "python-dotenv>=1.0.0",
    "langchain>=0.3.0",
    "langchain-openai>=0.3.0",
    "langchain-core>=0.3.0"
]

[project.optional-dependencies]
embedding = [
    "sentence-transformers>=2.2.0",
    "torch>=1.9.0",
    "numpy>=1.21.0"
]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "ruff>=0.1.0",
    "black>=23.0.0"
]

[project.scripts]
vibelint = "vibelint.cli:main"

[project.entry-points."vibelint.validators"]
# Built-in validators - organized by type
# Single-file validators (analyze individual files in isolation)
"DOCSTRING-MISSING" = "vibelint.validators.single_file.docstring:MissingDocstringValidator"
"DOCSTRING-PATH-REFERENCE" = "vibelint.validators.single_file.docstring:DocstringPathValidator"
"EXPORTS-MISSING-ALL" = "vibelint.validators.single_file.exports:MissingAllValidator"
"EXPORTS-MISSING-ALL-INIT" = "vibelint.validators.single_file.exports:InitAllValidator"
"PRINT-STATEMENT" = "vibelint.validators.single_file.print_statements:PrintStatementValidator"
"ABSOLUTE-IMPORTS" = "vibelint.validators.single_file.absolute_imports:AbsoluteImportValidator"
"EMOJI-IN-STRING" = "vibelint.validators.single_file.emoji:EmojiUsageValidator"
"LOGGER-NAME" = "vibelint.validators.single_file.logger_names:LoggerNameValidator"
"TYPING-POOR-PRACTICE" = "vibelint.validators.single_file.typing_quality:TypingQualityValidator"
"VIBELINT-SELF-VALIDATION" = "vibelint.validators.single_file.self_validation:VibelintSelfValidator"
"FILE-TOO-LONG" = "vibelint.validators.single_file.line_count:LineCountValidator"
"RELATIVE-IMPORTS" = "vibelint.validators.single_file.relative_imports:RelativeImportValidator"
"DICT-ANTIPATTERN" = "vibelint.validators.single_file.dict_antipattern:DictAntipatternValidator"

# Project-wide validators (require knowledge of entire project)
"DEAD-CODE-FOUND" = "vibelint.validators.project_wide.dead_code:DeadCodeValidator"
"API-CONSISTENCY" = "vibelint.validators.project_wide.api_consistency:APIConsistencyValidator"
"CODE-SMELLS" = "vibelint.validators.project_wide.code_smells:CodeSmellValidator"
"MODULE-COHESION" = "vibelint.validators.project_wide.module_cohesion:ModuleCohesionValidator"

# Architecture validators (specialized project-wide analysis)
"ARCHITECTURE-INCONSISTENT" = "vibelint.validators.architecture.basic_patterns:ArchitectureValidator"
"ARCHITECTURE-LLM" = "vibelint.validators.architecture.llm_analysis:LLMAnalysisValidator"
"SEMANTIC-SIMILARITY" = "vibelint.validators.architecture.semantic_similarity:SemanticSimilarityValidator"
"FALLBACK-SILENT-FAILURE" = "vibelint.validators.architecture.fallback_patterns:FallbackAnalyzer"

# Third-party validators can be added here by other packages:
# Example:
# "MY-CUSTOM-RULE" = "my_package.validators:MyCustomValidator"


[project.entry-points."vibelint.formatters"]
human = "vibelint.reporting:HumanFormatter"
natural = "vibelint.reporting:NaturalLanguageFormatter"
json = "vibelint.reporting:JsonFormatter"
sarif = "vibelint.reporting:SarifFormatter"
llm = "vibelint.reporting:LLMFormatter"

[project.entry-points."vibelint.workflows"]
# Entry points for EXTERNAL packages to extend vibelint with custom workflows
# Built-in workflows are registered directly in code, not here

# Third-party workflows can be added here by other packages:
# Examples of different workflow types:
# Simple function workflow:
# "my-simple-check" = "my_package.workflows:simple_check_function"
#
# Class-based workflow:
# "my-complex-workflow" = "my_package.workflows:MyComplexWorkflow"
#
# Multi-file workflow module:
# "my-enterprise-workflow" = "my_package.workflows.enterprise_suite:EnterpriseWorkflowEngine"

[project.urls]
"Homepage" = "https://github.com/mithranm/vibelint"
"Bug Tracker" = "https://github.com/mithranm/vibelint/issues"

[tool.setuptools.packages.find]
where = ["src"]
include = ["vibelint*"]

[tool.black]
target-version = ["py310", "py311", "py312"]
line-length=100

[tool.ruff]
line-length = 100
target-version = "py310"
exclude = [
    ".git",
    ".pytest_cache",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "venv"
]

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
]
ignore = [
    "E501",   # Line too long (handled by black)
    "B008",   # Allow function calls in argument defaults
    "B904",   # Allow raise without from for now
    "UP036",  # Allow outdated version blocks
    "C414",   # Allow unnecessary list() calls for clarity
    "SIM102", # Allow nested if statements
    "SIM210", # Allow if-else instead of bool()
    "SIM113", # Allow manual index tracking
    "SIM103", # Allow explicit return True/False
    "N802",   # Allow uppercase function names (LibCST visitor methods)
    "N806",   # Allow uppercase variables
    "B006",   # Allow mutable defaults for now
    "B007",   # Allow unused loop variables
    "UP007",  # Allow Union syntax for now
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["F401", "F811"]  # Allow unused imports in tests

[tool.setuptools.package-data]
vibelint = ["VIBECHECKER.txt"]

# Local vibelint config for analyzing vibelint itself
[tool.vibelint]
include_globs = ["**/*"]
exclude_globs = [
    "**/__pycache__/**",
    "**/.*",           # dotfiles/directories
    "build/**",
    "dist/**",
    "*cache*/**",      # any cache directories
    "*.vibelint*",     # vibelint artifacts
    ".vibelint-*/**",  # vibelint directories
    "*.pyc", "*.pyo", "*.pyd",  # compiled python
    "*.log"            # log files
]
# LLM config will be inherited from parent project

# Workflow-specific configurations
[tool.vibelint.workflows.justification]
# Configuration for justification workflow
max_file_size_lines = 2000  # Files larger than this get flagged for splitting
enable_llm_analysis = true
enable_static_analysis = true
enable_dependency_analysis = true
reports_directory = ".vibelint-reports/justification_workflow"

[tool.vibelint.workflows.cleanup]
# Configuration for cleanup workflow
aggressive_mode = false
backup_before_cleanup = true

# Third-party workflows can define their own config sections:
# [tool.vibelint.workflows.my-custom-workflow]
# custom_setting = "value"
# another_setting = 123


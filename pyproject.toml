[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "vibelint"
version = "0.1.2"
description = "Suite of tools to enhance the vibe coding process."
authors = [
  { name = "Mithran Mohanraj", email = "mithran.mohanraj@gmail.com" }
]
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Quality Assurance",
]
dependencies = [
    "click>=8.1.0",
    "tomli>=2.0.0; python_version < '3.11'",
    "tomli-w",
    "colorama>=0.4.0",
    "rich>=12.0.0",
    "libcst",
    "requests>=2.25.0",
    "python-dotenv>=1.0.0",
    "langchain>=0.3.0",
    "langchain-openai>=0.3.0",
    "langchain-core>=0.3.0"
]

[project.optional-dependencies]
embedding = [
    "sentence-transformers>=2.2.0",
    "torch>=1.9.0",
    "numpy>=1.21.0"
]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "ruff>=0.1.0",
    "black>=23.0.0"
]

[project.scripts]
vibelint = "vibelint.cli:main"

[project.entry-points."vibelint.validators"]
# Semantic rule IDs pointing to individual validator classes
"DOCSTRING-MISSING" = "vibelint.validators.docstring:MissingDocstringValidator"
"DOCSTRING-PATH-REFERENCE" = "vibelint.validators.docstring:DocstringPathValidator"
"EXPORTS-MISSING-ALL" = "vibelint.validators.exports:MissingAllValidator"
"EXPORTS-MISSING-ALL-INIT" = "vibelint.validators.exports:InitAllValidator"
"PRINT-STATEMENT" = "vibelint.validators.print_statements:PrintStatementValidator"
"EMOJI-IN-STRING" = "vibelint.validators.emoji:EmojiUsageValidator"
"LOGGER-NAME" = "vibelint.validators.logger_names:LoggerNameValidator"
"DEAD-CODE-FOUND" = "vibelint.validators.dead_code:DeadCodeValidator"
"ARCHITECTURE-INCONSISTENT" = "vibelint.validators.architecture.basic_patterns:ArchitectureValidator"
"TYPING-POOR-PRACTICE" = "vibelint.validators.typing_quality:TypingQualityValidator"
"ARCHITECTURE-LLM" = "vibelint.validators.architecture.llm_analysis:LLMAnalysisValidator"
"SEMANTIC-SIMILARITY" = "vibelint.validators.architecture.semantic_similarity:SemanticSimilarityValidator"
"FALLBACK-SILENT-FAILURE" = "vibelint.validators.architecture.fallback_patterns:FallbackAnalyzer"
"API-CONSISTENCY" = "vibelint.validators.api_consistency:APIConsistencyValidator"
"CODE-SMELLS" = "vibelint.validators.code_smells:CodeSmellValidator"
"MODULE-COHESION" = "vibelint.validators.module_cohesion:ModuleCohesionValidator"


[project.entry-points."vibelint.formatters"]
human = "vibelint.reporting:HumanFormatter"
natural = "vibelint.reporting:NaturalLanguageFormatter"
json = "vibelint.reporting:JsonFormatter"
sarif = "vibelint.reporting:SarifFormatter"
llm = "vibelint.reporting:LLMFormatter"

[project.entry-points."vibelint.workflows"]
# Built-in workflows are auto-discovered from vibelint.workflows package
# Users can add custom workflows here:
# my-custom-workflow = "my_package.workflows:MyCustomWorkflow"

[project.urls]
"Homepage" = "https://github.com/mithranm/vibelint"
"Bug Tracker" = "https://github.com/mithranm/vibelint/issues"

[tool.setuptools.packages.find]
where = ["src"]
include = ["vibelint*"]

[tool.vibelint]
# Simple configuration - most users just need this
include_globs = ["src/**/*.py", "tests/**/*.py"]
exclude_globs = ["tests/fixtures/*"]

# Report configuration
reports_dir = ".vibelint-reports"  # Directory for detailed analysis reports (gitignored)
llm_trace_logs = true              # Log complete LLM workflow traces for debugging/auditing

# Organized report subdirectories
[tool.vibelint.reports]
output_dir = ".vibelint-reports"
justification_dir = ".vibelint-reports/justification/current"
workflow_dir = ".vibelint-reports/workflow/current"
analysis_dir = ".vibelint-reports/analysis/current"
auto_archive_days = 7  # Move reports older than N days to archived/ subdirectories

# Rule severity levels: "OFF", "INFO", "WARN", "BLOCK"
[tool.vibelint.rules]
"PRINT-STATEMENT" = "WARN"
"EMOJI-IN-STRING" = "WARN"
"DEAD-CODE-FOUND" = "INFO"
"ARCHITECTURE-LLM" = "WARN"

# Docstring configuration
[tool.vibelint.docstring]
require_path_references = false         # Set to true to require filepath at end of docstrings
require_module_docstrings = true        # Require module-level docstrings
require_class_docstrings = true         # Require class docstrings
require_function_docstrings = false     # Require function docstrings (can be noisy)
path_reference_format = "relative"      # Options: "relative", "absolute", "module_path"
include_private_functions = false       # Check docstrings for _private functions

# Dual LLM configuration - clean and simple
[tool.vibelint.llm]
# Fast LLM: High-speed inference for quick tasks (vLLM)
fast_api_url = "https://claudiallm-auth-worker.mithran-mohanraj.workers.dev"
fast_model = "openai/gpt-oss-20b"
fast_temperature = 0.1
fast_max_tokens = 2048

# Orchestrator LLM: Large context for complex reasoning (llama.cpp)
orchestrator_api_url = "https://chipllm-auth-worker.mithran-mohanraj.workers.dev"
orchestrator_model = "C:\\dev\\openai_gpt-oss-120b-MXFP4.gguf"
orchestrator_temperature = 0.2
orchestrator_max_tokens = 8192
orchestrator_max_context_tokens = 28800  # Discovered via diagnostics (32k with 10% safety margin)
fast_max_context_tokens = 900  # Discovered via diagnostics (1k with 10% safety margin)

# Automatic routing (when to use which LLM)
context_threshold = 3000              # Use orchestrator for >3k tokens
enable_context_probing = true         # Auto-discover actual limits
enable_fallback = false               # Fail fast when configured models unavailable (unconfigured features gracefully degrade)

# Thinking token removal configuration
remove_thinking_tokens = true        # Set to false to keep all model output
thinking_format = "harmony"          # Options: "harmony", "qwen", "custom"

# For models using different thinking patterns, set thinking_format = "custom" and specify:
# custom_thinking_patterns = [
#     "r'<think>.*?</think>'",          # For models using <think> tags
#     "r'<reasoning>.*?</reasoning>'",   # For models using <reasoning> tags
#     "r'\\[THINKING\\].*?\\[/THINKING\\]'", # For models using [THINKING] blocks
#     "r'```thinking.*?```'",           # For models using code block thinking
# ]

# Examples for common model families:
# - Claude (Anthropic): thinking_format = "harmony" (default)
# - Qwen models: thinking_format = "qwen"
# - OpenAI o1 models: thinking_format = "custom" + patterns for their format
# - Custom/local models: thinking_format = "custom" + custom_thinking_patterns

# Specialized embedding configuration
[tool.vibelint.embeddings]
# Code embeddings: Optimized for function similarity, architectural patterns, duplicate logic
code_api_url = "https://vanguardone-embedding-auth-worker.mithran-mohanraj.workers.dev"
code_model = "text-embedding-ada-002"  # Model name expected by the API
code_dimensions = 768  # Embedding vector size

# Natural language embeddings: Optimized for documentation, comments, requirements
natural_api_url = "https://vanguardtwo-embedding-auth-worker.mithran-mohanraj.workers.dev"
natural_model = "text-embedding-ada-002"  # Model name expected by the API
natural_dimensions = 1536  # Embedding vector size

# Embedding usage routing
use_specialized_embeddings = true  # Set to false to use local models only
similarity_threshold = 0.85  # Threshold for similarity detection

# Vector database configuration
[tool.vibelint.vector_store]
# Backend options: "memory", "qdrant", "vectorize", "pinecone"
backend = "qdrant"  # Default to Qdrant for proper vector performance

# In-memory options (lightweight fallback only)
cache_size = 10000  # Maximum vectors to keep in memory
# Note: No persistence - use Qdrant for proper vector storage

# Qdrant options (native ARM64 binary - no Docker needed)
qdrant_url = "http://localhost:6333"
qdrant_collection = "vibelint_embeddings"
# qdrant_api_key via QDRANT_API_KEY environment variable

# Chroma options (lightweight alternative)
chroma_path = ".vibelint-cache/chroma"
chroma_collection = "vibelint_embeddings"

# Cloudflare Vectorize options (recommended for edge/cloud)
vectorize_account_id = "your-cloudflare-account-id"
vectorize_index = "vibelint-embeddings"
# vectorize_api_token via VECTORIZE_API_TOKEN environment variable

# Pinecone options (cloud)
pinecone_environment = "us-west1-gcp"
pinecone_index = "vibelint-embeddings"
# pinecone_api_key via PINECONE_API_KEY environment variable

# Performance tuning
similarity_metric = "cosine"  # "cosine", "euclidean", "dot"
batch_size = 100  # Vectors to process in batch operations

[tool.black]
target-version = ["py310", "py311", "py312"]
line-length=100

[tool.ruff]
line-length = 100
target-version = "py310"
exclude = [
    ".git",
    ".pytest_cache",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "venv"
]

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
]
ignore = [
    "E501",   # Line too long (handled by black)
    "B008",   # Allow function calls in argument defaults
    "B904",   # Allow raise without from for now
    "UP036",  # Allow outdated version blocks
    "C414",   # Allow unnecessary list() calls for clarity
    "SIM102", # Allow nested if statements
    "SIM210", # Allow if-else instead of bool()
    "SIM113", # Allow manual index tracking
    "SIM103", # Allow explicit return True/False
    "N802",   # Allow uppercase function names (LibCST visitor methods)
    "N806",   # Allow uppercase variables
    "B006",   # Allow mutable defaults for now
    "B007",   # Allow unused loop variables
    "UP007",  # Allow Union syntax for now
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["F401", "F811"]  # Allow unused imports in tests

[tool.setuptools.package-data]
vibelint = ["VIBECHECKER.txt"]